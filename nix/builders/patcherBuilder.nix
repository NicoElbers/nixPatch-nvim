{ lib, stdenvNoCC, makeWrapper }:
{
  patcher
  , nixpkgs
  , plugins
  , customSubs ? []
}:
{
  luaPath
  , plugins
  , name
  , withNodeJs
  , withPython3
  , withRuby
  , withPerl
  , extraConfig ? []
  , customSubs ? [ ] 
}:
let
  nixpkgsOutPath = nixpkgs.outPath;

  inputBlob = [(builtins.concatStringsSep ";"
    (builtins.map (plugin: "${plugin.pname}|${plugin.version}|${plugin}") plugins))];

  inputBlobEscaped = builtins.trace (if inputBlob == [ "" ] then "t" else "f") (if inputBlob == [""] 
    then "'a'"
    else lib.escapeShellArgs inputBlob);

  subBlob = [(builtins.concatStringsSep ";"
    (map (s: "${s.from}|${s.to}") customSubs))];

  subBlobEscaped = builtins.trace (if subBlob == [ "" ] then "t" else "f") (if subBlob == [""] 
    then "'b'"
    else lib.escapeShellArgs subBlob);

  hostprog_check_table = {
    node = withNodeJs;
    python = false;
    python3 = withPython3;
    ruby = withRuby;
    perl = withPerl;
  };

  genProviderCmd = prog: withProg: 
    if withProg 
    then "vim.g.${prog}_host_prog='${placeholder "out"}/bin/${name}-${prog}'"
    else "vim.g.loaded_${prog}_provider=0";

  # TODO: pass these in as extra config later
  hostProviderLua = lib.mapAttrsToList genProviderCmd hostprog_check_table;

  finalExtraConfig = builtins.concatStringsSep "\n" (
        [ "-- Config generated by ${name}"]
        # Advertise providers to your config
        ++ hostProviderLua
        # Advertise to your config that this is nixos
        ++ [ "vim.g.nixos = true"]
        # Make sure nvim looks at the correct config
        ++ [ '' 
           vim.g.configdir = vim.fn.stdpath('config')
           vim.opt.packpath:remove(vim.g.configdir)
           vim.opt.runtimepath:remove(vim.g.configdir)
           vim.opt.runtimepath:remove(vim.g.configdir .. "/after")
           vim.g.configdir = [[${placeholder "out"}]]
           vim.opt.packpath:prepend(vim.g.configdir)
           vim.opt.runtimepath:prepend(vim.g.configdir)
           vim.opt.runtimepath:append(vim.g.configdir .. "/after") 
        '']
        ++ [ "-- Extra config provided by user"]
        ++ (if (builtins.isList extraConfig) then extraConfig else [extraConfig])
        ++ [ "-- Lua config"]
        ++ [ "\n" ]);

  finalExtraConfigEscaped = lib.escapeShellArgs [finalExtraConfig];
in 
stdenvNoCC.mkDerivation {
  name = "nvim-config-patched";
  version = "0";
  src = luaPath;

  dontConfigure = true;
  dontInstall = true;

  buildPhase = /* bash */ ''
  echo "${nixpkgsOutPath}"
  echo "###############"
  echo "$(pwd)" 
  echo "###############"
  echo "$out"
  echo "###############"
  echo "${inputBlobEscaped}"
  echo "###############"
  echo "${subBlobEscaped}"
  echo "###############"
  echo "${finalExtraConfigEscaped}"
  echo "###############"

  ${lib.getExe patcher} \
    ${nixpkgsOutPath} \
    $(pwd) \
    $out \
    ${inputBlobEscaped} \
    ${subBlobEscaped} \
    ${finalExtraConfigEscaped} 
  '';
}
